<중복로그인, 2시간 후 로그아웃 주석>
	/**
	 * <PRE>
	 * 1. MethodName	: selectSessionId
	 * 2. ClassName		: SessionLogServiceImpl
	 * 3. Author		: 조민식
	 * 4. Creation Date	: 2024. 5. 8. 오후 5:15:34
	 * 5. Comment		: 세션 로그 조회 후 로그인 세션과 비교
	 * </PRE>
	 * @return
	 */
	@Override
	public String selectSessionId() {
		String chkSessionVal = "03";

		String domainUrl= CmmnUtils.getServerDomain();

		// 중복체크 제외 대상확인 (유지보수용)
		//if (!this.chkPassUserId()) { => chkPassUserId()는 "admin", "neoplus"인지 판단하는 구문임. 따라서 관리자 계정 유무 판단하는 코드
			// 로컬에서 중복체크 제외
			//if (domainUrl.indexOf("localhost") == -1) { => indexOf() == -1은 값이 없다는 뜻. 따라서 url에 'localhost'가 없다면
				String userIdx = this.getUserIdx();
				if (EgovStringUtil.isNotEmpty(userIdx)) {
					TB_SESION_LOG tbSesionLog = new TB_SESION_LOG();
					tbSesionLog.setUserIdx(userIdx);
					SessionVO SessionVO = sessionLogMapper.selectSessionId(tbSesionLog);
					String srchSessionId = SessionVO.getSesionId();
					// SesionYn 01 인경우 로그인한지 2시간이 지난경우 02아닌경우
					String srchSesionYn = SessionVO.getSesionYn();

					if (EgovStringUtil.isNotEmpty(srchSessionId)) {
						String sessionId = (String) SessionUtil.getAttribute("idKey");

						if(StringUtils.isNotBlank(sessionId)) {
							// 중복로그인
							if (!srchSessionId.equals(sessionId)) {
								tbSesionLog.setSesionId(sessionId);
								sessionLogMapper.deleteSessionLog(tbSesionLog);
								chkSessionVal = "01";
							// 2시간 지난경우
							} else if ("01".equals(srchSesionYn)){
								sessionLogMapper.deleteSessionLog(tbSesionLog);
								chkSessionVal = "02";
							}else {
								sessionLogMapper.updateSessionLog(tbSesionLog);
							}
						}
					}
				}
			//}
		//}
		return chkSessionVal;
	}

===============================================================================
<중복로그인, 2시간 후 로그아웃 주석해제>
	/**
	 * <PRE>
	 * 1. MethodName	: selectSessionId
	 * 2. ClassName		: SessionLogServiceImpl
	 * 3. Author		: 조민식
	 * 4. Creation Date	: 2024. 5. 8. 오후 5:15:34
	 * 5. Comment		: 세션 로그 조회 후 로그인 세션과 비교
	 * </PRE>
	 * @return
	 */
	@Override
	public String selectSessionId() {
		String chkSessionVal = "03";

		String domainUrl= CmmnUtils.getServerDomain();

		// 중복체크 제외 대상확인 (유지보수용)
		if (!this.chkPassUserId()) {
			// 로컬에서 중복체크 제외
			if (domainUrl.indexOf("localhost") == -1) {
				String userIdx = this.getUserIdx();
				if (EgovStringUtil.isNotEmpty(userIdx)) {
					TB_SESION_LOG tbSesionLog = new TB_SESION_LOG();
					tbSesionLog.setUserIdx(userIdx);
					SessionVO SessionVO = sessionLogMapper.selectSessionId(tbSesionLog);
					String srchSessionId = SessionVO.getSesionId();
					// SesionYn 01 인경우 로그인한지 2시간이 지난경우 02아닌경우
					String srchSesionYn = SessionVO.getSesionYn();

					if (EgovStringUtil.isNotEmpty(srchSessionId)) {
						String sessionId = (String) SessionUtil.getAttribute("idKey");

						if(StringUtils.isNotBlank(sessionId)) {
							// 중복로그인
							if (!srchSessionId.equals(sessionId)) {
								tbSesionLog.setSesionId(sessionId);
								sessionLogMapper.deleteSessionLog(tbSesionLog);
								chkSessionVal = "01";
							// 2시간 지난경우
							} else if ("01".equals(srchSesionYn)){
								sessionLogMapper.deleteSessionLog(tbSesionLog);
								chkSessionVal = "02";
							}else {
								sessionLogMapper.updateSessionLog(tbSesionLog);
							}
						}
					}
				}
			}
		}
		return chkSessionVal;
	}

===============================================================================
=> chkPassUserId() 코드
	/**
	 * <PRE>
	 * 1. MethodName	: chkPassUserId
	 * 2. ClassName		: SessionLogServiceImpl
	 * 3. Author		: 조민식
	 * 4. Creation Date	: 2024. 5. 20. 오전 11:20:47
	 * 5. Comment		: 아이디 중복체크 제외 (유지보수 대응용)
	 * </PRE>
	 * @return
	 */
	private boolean chkPassUserId() {
		boolean chkPassFlag = false; => return 될 값의 기본값은 false
		String[] arrPassId = {"admin", "neoplus"}; => 배열 arrPassId로 "admin", "neoplus" 설정
		String userId = null;
		String systemNm	= ems.getMessage("SYSTEM.NAME"); // KIPS_CONFIRM.adm or usr
			=> systemNm에 담기는 "SYSTEM.NAME"은 global.properties에 설정되어 있는 msg로, adm과 usr에서 각각 'ADM', 'USR'을 전달하게 된다.

		if ("ADM".equals(systemNm)) { // global.properties > SYSTEM.NAME = ADM	=> systemNm에 담긴 값이 ADM과 같다면
			if (AdmSessionUtil.isLogin()) { => AdmSessionUtil에 isLogin()이 true면
				AdmSessionVO admSessionVO = AdmSessionUtil.getSesson(); => session을 admSessionVO에 담는다.
				if(admSessionVO != null) { => admSessionVO가 null이 아니라면
					TB_USER_MNGR adminVO = admSessionVO.getUser(); => admSessionVO의 유저 정보를 adminVO에 담는다.

					if(adminVO != null) { => adminVO가 null이 아니라면
						userId = adminVO.getId(); adminVO의 ID를 userID에 담는다.
					}
				}
			}

		} else if ("USR".equals(systemNm)) { // global.properties > SYSTEM.NAME = USR
			if (UsrSessionUtil.isLogin()) { => adm과 동일하다.
				UsrSessionVO usrSessionVO = UsrSessionUtil.getSesson();

				if(usrSessionVO != null) {
					UsrInfoVO userVO = usrSessionVO.getUser();

					if(userVO != null) {
						userId = userVO.getId();
					}
				}
			}
		}

		if (Arrays.asList(arrPassId).indexOf(userId) > -1) { // userId가 'admin', 'neoplus'인지 비교 (-1: 해당X, userId > -1: 'admin', 'neoplus')
			chkPassFlag = true; => 'admin' or 'neoplus'를 return 한다.
		}
		//	true: 'admin','neoplus' / false: 'admin','neoplus' 외의 계정
		return chkPassFlag;
	}
